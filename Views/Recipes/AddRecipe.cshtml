@using Recipes.Controllers;
@model Recipes.Models.RecipeViewModel

@{
  ViewData["Title"] = "Create a recipe";
}

<div>
  <h1>New Recipe</h1>

  <form id="recipeForm">
    <div>
      <label asp-for="@Model.Name">Name: </label>
      <input type="text" asp-for="@Model.Name" />
    </div>
    <div>
      <label asp-for="@Model.Description">Description: </label>
      <textarea asp-for="@Model.Description" rows="5" cols="60"></textarea>
    </div>
    <div>
      <label asp-for="@Model.PrepTime">Prep time: </label>
      <input type="number" asp-for="@Model.PrepTime" />
    </div>
    <div>
      <label asp-for="@Model.CookingTime">Cook time: </label>
      <input type="number" asp-for="@Model.CookingTime" />
    </div>
    <div>
      <label asp-for="@Model.Servings">Servings: </label>
      <input type="number" asp-for="@Model.Servings" />
    </div>
    <div>
      <label asp-for="@Model.Difficulty">Difficulty: </label>
      <input type="number" asp-for="@Model.Difficulty" />
    </div>
    <div>
      <label asp-for="@Model.ImageUrl">Image Url: </label>
      <input value="ImplementLater" asp-for="@Model.ImageUrl" />
    </div>
    <div id="ingredientsList"></div>
    <div id="instructionsList"></div>
  </form>

  <button id="addIngredientButton">Add Ingredient</button>
  <button id="addInstructionButton">Add Step</button>
  <button id="submitButton" type="submit">Submit Recipe</button>
</div>

<script>

  let ingredientSuggestions = null;
  let getSuggestionsTimeout = null;

  document.querySelector("#submitButton").addEventListener("click", submitRecipe);

  document.querySelector("#addIngredientButton").addEventListener("click", addIngredient);
  document.querySelector("#addInstructionButton").addEventListener("click", addInstruction);

  const postUrl = "@Url.Action(nameof(RecipesController.AddRecipe), RecipesController.Name)"

  async function submitRecipe() {
    const formEl = document.querySelector("#recipeForm");
    const formData = new FormData(formEl);

    try {
      const result = await fetch(postUrl, {
        method: 'post',
        body: formData
      })
    } catch (e) {
      console.log(e);
    }
  }

  @* function getIngredientList() {
    const ingredientEl = document.querySelector('#ingredientsList');
    const ingredientList = [...ingredientEl.children]
    .map(ingredient => {
    return ({
    Name: ingredient.querySelector(".ingredient-name").value,
    Description: ingredient.querySelector(".ingredient-description").value
    });
    });
    return ingredientList;
    } *@

    function addIngredient() {
      const ingredientsEl = document.querySelector('#ingredientsList');
      const inputCount = ingredientsEl.children?.length ?? 0;
      const inputGroup = document.createElement('div');
      inputGroup.classList.add('ingredient-input-group');

      const label = document.createElement('label');
      label.htmlFor = `Ingredients[${inputCount}].Name`;
      label.textContent = `Ingredient ${inputCount + 1} Name:`;

      const inputWrapper = document.createElement('div');
      inputWrapper.className = "ingredient-name-container";
      inputWrapper.id = `ingredient-${inputCount + 1}`;

      const nameInput = document.createElement('input');
      nameInput.classList.add("ingredient-name");
      nameInput.name = `Ingredients[${inputCount}].Name`;
      nameInput.id = nameInput.name;

      nameInput.addEventListener('keydown', (e) => {
        if (e.key === "Tab") {
          if (ingredientSuggestions) {
            nameInput.value = ingredientSuggestions[0];
          }
        }
      });

      // TODO: clear getSuggestionsTimeout on focusout
      nameInput.addEventListener('focusout', clearIngredientSuggestions);

      nameInput.addEventListener('keyup', async (e) => {
        if (e.key === "Escape" && ingredientSuggestions) {
          clearIngredientSuggestions();
          return;
        }
        if (e.target.value.length >= 2) {
          // TODO: need to debounce api requests
          /*
            set timeout for api call
            clear timeout on escape key or focusout
            timeout callback should use latest value for input el
            append fetched suggestions to input el
          */

          if (getSuggestionsTimeout === null) {
            ingredientSuggestions = await getIngredientSuggestions();
          }

          if (ingredientSuggestions.length === 0) {
            ingredientSuggestions = null;
            return;
          }
          const suggestionList = document.createElement('ul');
          suggestionList.className = "ingredient-suggestion-list";

          for (let i = 0; i < ingredientSuggestions.length; ++i) {
            const suggestion = document.createElement('li');
            suggestion.addEventListener('click', () => {
              nameInput.value = suggestion.textContent;
            })
            suggestion.textContent = ingredientSuggestions[i];
            suggestionList.appendChild(suggestion);
          }

          if (inputWrapper.children.length > 1) inputWrapper.removeChild(inputWrapper.lastChild);

          // TODO: make autocomplete suggestions clickable/tab-able
          inputWrapper.appendChild(suggestionList);
        }

      });

      const descriptionLabel = document.createElement('label');
      descriptionLabel.htmlFor = `Ingredients[${inputCount}].Description`;
      descriptionLabel.textContent = `Description:`;

      const description = document.createElement('input');
      description.classList.add("ingredient-description");
      description.name = `Ingredients[${inputCount}].Description`;
      description.id = description.name;

      inputWrapper.appendChild(nameInput);

      inputGroup.appendChild(label);
      inputGroup.appendChild(inputWrapper);
      inputGroup.appendChild(descriptionLabel);
      inputGroup.appendChild(description);

      ingredientsEl.appendChild(inputGroup);
    }

  function addInstruction() {
    const instructionsEl = document.querySelector('#instructionsList');
    const inputCount = instructionsEl.children?.length ?? 0;
    const inputGroup = document.createElement('div');
    inputGroup.classList.add('instruction-input-group');

    const label = document.createElement('label');
    label.htmlFor = `Instructions[${inputCount}].Description`;
    label.textContent = `Step ${inputCount + 1}:`;

    const input = document.createElement('textarea');
    input.classList.add("instruction-description");
    input.name = `Instructions[${inputCount}].Description`;
    input.rows = 3;

    const stepNo = document.createElement('input');
    stepNo.value = inputCount + 1;
    stepNo.name = `Instructions[${inputCount}].Step`;
    stepNo.hidden = true;

    inputGroup.appendChild(label);
    inputGroup.appendChild(input);
    inputGroup.appendChild(stepNo);

    instructionsEl.appendChild(inputGroup);
  }

  async function getIngredientSuggestions() {
    const nameSubstring = document.activeElement.value;

    if (!nameSubstring) return;

    var response = await fetch("@Url.Action(nameof(RecipesController.GetIngredientSuggestions), RecipesController.Name)", {
      method: 'post',
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(nameSubstring)
    });

    const ingredientString = await response.json();

    return JSON.parse(ingredientString);
  }

  function clearIngredientSuggestions() {
    ingredientSuggestions = null;
    document.querySelector('.ingredient-suggestion-list')?.remove();
  }

</script>